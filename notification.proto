syntax = "proto3";

package notification;
option go_package =".;notification_v1";

//QueueRequest for Queue Request with these defined requirements
message MessageOut{
    string notificationID = 2;
    string profileID = 3;
    string contactID = 4;
    string contact = 5;
    string subscriptionID = 6;
    string messageTemplete = 7;
    map<string ,string> messageVariables = 8;
    string language = 9;
    bool autosend = 10;
    string channel = 11;
}


message StatusRequest{
    string notificationID = 1;
}

message StatusResponse{
    string notificationID = 1;
    string state = 2;
    bool released = 3;
    string transientID = 4;
    string externalID = 5;
    string externalStatus = 6;

}

message ReleaseRequest{
    string notificationID = 1;
    string releaseMessage = 2;
}

message MessageIn{
    string notificationID = 1;
    string profileID = 2;
    string contactID = 3;
    string contact = 4;
    string productID = 5;
    string channelID = 6;
    string messageType = 7;
    map<string,string> payLoad = 8;
    string language = 9;
}

message SearchRequest{
    string notificationID = 1;
    string profileID = 2;
    string contactID = 3;
    string productID = 4;
    string date = 5;
    string query =6;
}


message SearchResponse{
    string notificationID = 1;
    string profileID = 2;
    string contactID = 3;
    string productID = 4;
    string subscriptionID = 5;
    string language = 6;
    string messageType = 7;
    map<string,string> payLoad = 8;
    bool outbound = 9;
    string state =10;
    bool released = 11;
    string transientID = 12;
    string externalID = 13;
    string externalStatus = 14;
}

service NotificationService{

    //Out method for queueing massages as requested
    rpc Out (MessageOut) returns (StatusResponse);

    //CommunicationStatus request to determine if notification is prepared or released
    rpc Status (StatusRequest) returns (StatusResponse);

    //QueueRelease method for releasing queued massages and returns if notification status if released
    rpc Release (ReleaseRequest) returns (StatusResponse);

    //In method is for client request for particular notification respones from system
    rpc In (MessageIn) returns (StatusResponse);

    //Search method is for client request for particular notification details from system
    rpc Search (SearchRequest) returns (stream SearchResponse);

}